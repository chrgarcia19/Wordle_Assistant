name: Build and Release Cross-Platform Binaries for the Wordle Assistant
permissions: 
  contents: write
on:
  push:
    tags:
      - 'v*'  # Triggers when you push a tag like v1.0.0
  workflow_dispatch:  # Allows manual trigger from GitHub UI
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            output_name: WordleAssistant.exe
            asset_name: WordleAssistant-Windows.exe
            separator: ";"
          - os: macos-13
            output_name: WordleAssistant
            asset_name: WordleAssistant-macOS-Intel.zip
            separator: ":"
            arch_name: "Intel"
            folder_name: "WordleAssistant-macOS-Intel"
          - os: macos-latest
            output_name: WordleAssistant
            asset_name: WordleAssistant-macOS.zip
            separator: ":"
            arch_name: "Apple Silicon"
            folder_name: "WordleAssistant-macOS"
          - os: ubuntu-latest
            output_name: WordleAssistant
            asset_name: WordleAssistant-Linux.AppImage
            separator: ":"
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller colorama
    
    - name: Build executable (Windows/macOS)
      if: runner.os != 'Linux'
      run: |
        pyinstaller --onefile --add-data "wordlewords.txt${{ matrix.separator }}." --name WordleAssistant wordle_assistant.py
    
    - name: Build executable (Linux - onedir for AppImage)
      if: runner.os == 'Linux'
      run: |
        pyinstaller --onedir --clean --add-data "wordlewords.txt${{ matrix.separator }}." --name WordleAssistant wordle_assistant.py
    
    - name: Package for macOS
      if: runner.os == 'macOS'
      run: |
        chmod +x dist/WordleAssistant
        
        # Create .app bundle structure
        mkdir -p "Wordle Assistant.app/Contents/MacOS"
        mkdir -p "Wordle Assistant.app/Contents/Resources"
        
        # Copy the binary
        cp dist/WordleAssistant "Wordle Assistant.app/Contents/MacOS/"
        
        # Create launcher script that opens Terminal
        cat > "Wordle Assistant.app/Contents/MacOS/launcher" << 'EOF'
        #!/bin/bash
        DIR="$(cd "$(dirname "$0")" && pwd)"
        osascript -e 'tell application "Terminal" to do script "cd \"'"$DIR"'\" && ./WordleAssistant; echo \"\"; read -n 1 -s -r -p \"Press any key to close...\""'
        EOF
        chmod +x "Wordle Assistant.app/Contents/MacOS/launcher"
        
        # Create Info.plist
        cat > "Wordle Assistant.app/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>launcher</string>
            <key>CFBundleName</key>
            <string>Wordle Assistant</string>
            <key>CFBundleIdentifier</key>
            <string>com.wordleassistant.app</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>LSMinimumSystemVersion</key>
            <string>10.13</string>
        </dict>
        </plist>
        EOF
        
        # Create README
        mkdir -p ${{ matrix.folder_name }}
        cat > ${{ matrix.folder_name }}/README.txt << 'EOF'
        Wordle Assistant for macOS (${{ matrix.arch_name }})
        ===========================
        
        To run:
        1. Extract this archive
        2. Double-click "Wordle Assistant.app"
        
        Alternative (from Terminal):
        - Right-click "Wordle Assistant.app" → Show Package Contents
        - Navigate to Contents/MacOS/
        - Run: ./WordleAssistant
        
        Note: This version is built for ${{ matrix.arch_name }} Macs.
        - Intel Macs: Download WordleAssistant-macOS-Intel.zip
        - Apple Silicon (M1/M2/M3/M4): Download WordleAssistant-macOS.zip
        
        If you get a security warning:
        1. Right-click "Wordle Assistant.app" → Open
        2. Click "Open" in the dialog
        
        Enjoy!
        EOF
        
        # Move app bundle and README into folder
        mv "Wordle Assistant.app" ${{ matrix.folder_name }}/
        
        # Package it
        zip -r ${{ matrix.asset_name }} ${{ matrix.folder_name }}/
        mv ${{ matrix.asset_name }} dist/
    
    - name: Install FUSE and appimagetool (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse libfuse2
        wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool
    
    - name: Build AppImage (Linux only)
      if: runner.os == 'Linux'
      run: |
        # Create AppDir structure
        mkdir -p WordleAssistant.AppDir/usr/bin
        cp -r dist/WordleAssistant WordleAssistant.AppDir/usr/bin/
        chmod +x WordleAssistant.AppDir/usr/bin/WordleAssistant/WordleAssistant
        
        # Create AppRun script with working copy-to-tmp approach
        cat > WordleAssistant.AppDir/AppRun << 'EOF'
        #!/bin/bash
        HERE="$(dirname "$(readlink -f "$0")")"
        
        # Create a temp directory and copy the entire PyInstaller bundle there
        RUNTIME_DIR="/tmp/wordle_assistant_runtime_$"
        mkdir -p "$RUNTIME_DIR"
        
        # Copy the entire PyInstaller directory to temp
        cp -r "$HERE/usr/bin/WordleAssistant" "$RUNTIME_DIR/"
        
        # The executable in temp
        APP_BIN="$RUNTIME_DIR/WordleAssistant/WordleAssistant"
        
        # Make it executable
        chmod +x "$APP_BIN"
        
        # Clean up on exit
        trap "rm -rf $RUNTIME_DIR" EXIT
        
        # If running in a terminal already, just execute directly
        if [ -t 0 ]; then
            exec "$APP_BIN" "$@"
        fi
        
        # Otherwise, find and launch a terminal emulator
        for term in gnome-terminal konsole xfce4-terminal mate-terminal lxterminal xterm; do
            if command -v "$term" >/dev/null 2>&1; then
                case "$term" in
                    gnome-terminal)
                        exec "$term" -- bash -c "'$APP_BIN' '$@'; echo ''; echo 'Press Enter to close...'; read; rm -rf '$RUNTIME_DIR'"
                        ;;
                    konsole)
                        exec "$term" --hold -e bash -c "'$APP_BIN' '$@'; rm -rf '$RUNTIME_DIR'"
                        ;;
                    *)
                        exec "$term" -e bash -c "'$APP_BIN' '$@'; echo ''; echo 'Press Enter to close...'; read; rm -rf '$RUNTIME_DIR'"
                        ;;
                esac
            fi
        done
        
        echo "ERROR: No terminal emulator found" >&2
        rm -rf "$RUNTIME_DIR"
        exit 1
        EOF
        chmod +x WordleAssistant.AppDir/AppRun
        
        # Create .desktop file
        cat > WordleAssistant.AppDir/WordleAssistant.desktop << 'EOF'
        [Desktop Entry]
        Name=Wordle Assistant
        Exec=AppRun
        Icon=wordle_assistant
        Type=Application
        Categories=Game;Utility;
        Terminal=true
        Comment=Wordle solving assistant
        EOF
        
        # Create a simple icon
        cat > WordleAssistant.AppDir/wordle_assistant.svg << 'EOF'
        <svg width="256" height="256" xmlns="http://www.w3.org/2000/svg">
          <rect width="256" height="256" fill="#6aaa64"/>
          <text x="128" y="140" font-family="Arial" font-size="80" fill="white" text-anchor="middle" font-weight="bold">W</text>
        </svg>
        EOF
        
        ln -s wordle_assistant.svg WordleAssistant.AppDir/.DirIcon
        
        # Build AppImage
        ARCH=x86_64 appimagetool WordleAssistant.AppDir WordleAssistant-Linux.AppImage
        
        # Move to dist for artifact upload
        mv WordleAssistant-Linux.AppImage dist/${{ matrix.asset_name }}
    
    - name: Rename output (Windows)
      if: runner.os == 'Windows'
      run: |
        move dist\${{ matrix.output_name }} dist\${{ matrix.asset_name }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.asset_name }}
    
    - name: Upload to Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/${{ matrix.asset_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}